version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: xlsx_mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: xlsx_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - xlsx_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: xlsx_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - xlsx_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: xlsx_backend
    restart: always
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=mysql+pymysql://user:password@mysql:3306/xlsx_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - backend_uploads:/app/temp_uploads
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - xlsx_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: xlsx_celery_worker
    restart: always
    environment:
      - DATABASE_URL=mysql+pymysql://user:password@mysql:3306/xlsx_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - xlsx_network
    command: celery -A app.core.celery_app worker --loglevel=info --queues=carga_queue

  # Celery Beat (Opcional para tareas programadas)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: xlsx_celery_beat
    restart: always
    environment:
      - DATABASE_URL=mysql+pymysql://user:password@mysql:3306/xlsx_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - xlsx_network
    command: celery -A app.core.celery_app beat --loglevel=info

  # Flower - Monitor de Celery (Opcional)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: xlsx_flower
    restart: always
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - xlsx_network
    command: celery -A app.core.celery_app flower --port=5555

  # Angular Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: xlsx_frontend
    restart: always
    ports:
      - "4200:4200"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - xlsx_network
    command: ng serve --host 0.0.0.0 --port 4200 --poll 2000

networks:
  xlsx_network:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  backend_uploads: